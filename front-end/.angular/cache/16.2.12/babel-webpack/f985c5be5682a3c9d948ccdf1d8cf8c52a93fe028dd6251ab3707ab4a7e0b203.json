{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AlbumService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://127.0.0.1:8000';\n    this.selectedAlbumSubject = new BehaviorSubject(null);\n    this.selectedAlbum$ = this.selectedAlbumSubject.asObservable();\n  }\n  // Method to get albums by artistId\n  getAlbumByartist(artistsId) {\n    const url = `${this.apiUrl}/api/albumes/${artistsId}/`;\n    return this.http.get(url).pipe(map(albumes => {\n      return albumes.map(albumes => ({\n        id: albumes.id,\n        albumTitle: albumes.albumTitle,\n        releaseDate: albumes.releaseDate,\n        totalDuration: albumes.totalDuration,\n        numberOfSongs: albumes.numberOfSongs,\n        coverImage: `${this.apiUrl}${albumes.coverImage}`,\n        backgroundImage: `${this.apiUrl}${albumes.backgroundImage}`,\n        artist_id: albumes.artist_id\n      }));\n    }), catchError(error => {\n      console.error('Error fetching album songs:', error);\n      return throwError(error);\n    }));\n  }\n  // Method to get songs by albumId\n  getSongOfAlbum(albumId) {\n    const url = `${this.apiUrl}/api/album/${albumId}/songs/`;\n    return this.http.get(url).pipe(map(songs => {\n      return songs.map(song => ({\n        id: song.id,\n        songTitle: song.songTitle,\n        audio: `${this.apiUrl}${song.audio}`,\n        duration: song.duration,\n        album: {\n          id: song.album.id,\n          albumTitle: song.album.albumTitle,\n          releaseDate: song.album.releaseDate,\n          coverImage: `${this.apiUrl}${song.album.coverImage}`,\n          artist: {\n            id: song.album.artist.id,\n            artistName: song.album.artist.artistName,\n            description: song.album.artist.description\n          }\n        }\n      }));\n    }), catchError(error => {\n      console.error('Error fetching album details and songs:', error);\n      return throwError(error);\n    }));\n  }\n  setSelectedAlbum(album) {\n    this.selectedAlbum$ = album;\n  }\n  getSelectedAlbum() {\n    return this.selectedAlbum$;\n  }\n  static #_ = this.ɵfac = function AlbumService_Factory(t) {\n    return new (t || AlbumService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlbumService,\n    factory: AlbumService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","throwError","catchError","map","AlbumService","constructor","http","apiUrl","selectedAlbumSubject","selectedAlbum$","asObservable","getAlbumByartist","artistsId","url","get","pipe","albumes","id","albumTitle","releaseDate","totalDuration","numberOfSongs","coverImage","backgroundImage","artist_id","error","console","getSongOfAlbum","albumId","songs","song","songTitle","audio","duration","album","artist","artistName","description","setSelectedAlbum","getSelectedAlbum","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\Album\\album.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin, Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlbumService {\r\n  private apiUrl = 'http://127.0.0.1:8000';\r\n\r\n  private selectedAlbumSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  public selectedAlbum$: Observable<any> = this.selectedAlbumSubject.asObservable();\r\n  songs: any;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  // Method to get albums by artistId\r\n  getAlbumByartist(artistsId: number): Observable<any[]> {\r\n    const url = `${this.apiUrl}/api/albumes/${artistsId}/`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      map(albumes => {\r\n        return albumes.map(albumes => ({\r\n          id: albumes.id,\r\n          albumTitle: albumes.albumTitle,\r\n          releaseDate: albumes.releaseDate,\r\n          totalDuration: albumes.totalDuration,\r\n          numberOfSongs: albumes.numberOfSongs,\r\n          coverImage: `${this.apiUrl}${albumes.coverImage}`,\r\n          backgroundImage: `${this.apiUrl}${albumes.backgroundImage}`,\r\n          artist_id: albumes.artist_id,\r\n        }));\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error fetching album songs:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  // Method to get songs by albumId\r\n  getSongOfAlbum(albumId: number): Observable<any[]> {\r\n    const url = `${this.apiUrl}/api/album/${albumId}/songs/`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      map(songs => {\r\n        return songs.map(song => ({\r\n          id: song.id,\r\n          songTitle: song.songTitle,\r\n          audio: `${this.apiUrl}${song.audio}`,\r\n          duration: song.duration,\r\n          album: {\r\n            id: song.album.id,\r\n            albumTitle: song.album.albumTitle,\r\n            releaseDate: song.album.releaseDate,\r\n            coverImage: `${this.apiUrl}${song.album.coverImage}`,\r\n            artist: {\r\n              id: song.album.artist.id,\r\n              artistName: song.album.artist.artistName,\r\n              description: song.album.artist.description,\r\n            }\r\n          }\r\n        }));\r\n      }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error('Error fetching album details and songs:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  setSelectedAlbum(album: any): void {\r\n    this.selectedAlbum$ = album;\r\n  }\r\n\r\n\r\n  getSelectedAlbum(): any {\r\n    return this.selectedAlbum$;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,EAAwBC,UAAU,QAAQ,MAAM;AAExE,SAASC,UAAU,EAAEC,GAAG,QAAmB,gBAAgB;;;AAM3D,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,MAAM,GAAG,uBAAuB;IAEhC,KAAAC,oBAAoB,GAAyB,IAAIR,eAAe,CAAM,IAAI,CAAC;IAC5E,KAAAS,cAAc,GAAoB,IAAI,CAACD,oBAAoB,CAACE,YAAY,EAAE;EAGzC;EAGxC;EACAC,gBAAgBA,CAACC,SAAiB;IAChC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACN,MAAM,gBAAgBK,SAAS,GAAG;IACtD,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAQD,GAAG,CAAC,CAACE,IAAI,CACnCZ,GAAG,CAACa,OAAO,IAAG;MACZ,OAAOA,OAAO,CAACb,GAAG,CAACa,OAAO,KAAK;QAC7BC,EAAE,EAAED,OAAO,CAACC,EAAE;QACdC,UAAU,EAAEF,OAAO,CAACE,UAAU;QAC9BC,WAAW,EAAEH,OAAO,CAACG,WAAW;QAChCC,aAAa,EAAEJ,OAAO,CAACI,aAAa;QACpCC,aAAa,EAAEL,OAAO,CAACK,aAAa;QACpCC,UAAU,EAAE,GAAG,IAAI,CAACf,MAAM,GAAGS,OAAO,CAACM,UAAU,EAAE;QACjDC,eAAe,EAAE,GAAG,IAAI,CAAChB,MAAM,GAAGS,OAAO,CAACO,eAAe,EAAE;QAC3DC,SAAS,EAAER,OAAO,CAACQ;OACpB,CAAC,CAAC;IACL,CAAC,CAAC,EACFtB,UAAU,CAACuB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAGA;EACAE,cAAcA,CAACC,OAAe;IAC5B,MAAMf,GAAG,GAAG,GAAG,IAAI,CAACN,MAAM,cAAcqB,OAAO,SAAS;IACxD,OAAO,IAAI,CAACtB,IAAI,CAACQ,GAAG,CAAQD,GAAG,CAAC,CAACE,IAAI,CACnCZ,GAAG,CAAC0B,KAAK,IAAG;MACV,OAAOA,KAAK,CAAC1B,GAAG,CAAC2B,IAAI,KAAK;QACxBb,EAAE,EAAEa,IAAI,CAACb,EAAE;QACXc,SAAS,EAAED,IAAI,CAACC,SAAS;QACzBC,KAAK,EAAE,GAAG,IAAI,CAACzB,MAAM,GAAGuB,IAAI,CAACE,KAAK,EAAE;QACpCC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;QACvBC,KAAK,EAAE;UACLjB,EAAE,EAAEa,IAAI,CAACI,KAAK,CAACjB,EAAE;UACjBC,UAAU,EAAEY,IAAI,CAACI,KAAK,CAAChB,UAAU;UACjCC,WAAW,EAAEW,IAAI,CAACI,KAAK,CAACf,WAAW;UACnCG,UAAU,EAAE,GAAG,IAAI,CAACf,MAAM,GAAGuB,IAAI,CAACI,KAAK,CAACZ,UAAU,EAAE;UACpDa,MAAM,EAAE;YACNlB,EAAE,EAAEa,IAAI,CAACI,KAAK,CAACC,MAAM,CAAClB,EAAE;YACxBmB,UAAU,EAAEN,IAAI,CAACI,KAAK,CAACC,MAAM,CAACC,UAAU;YACxCC,WAAW,EAAEP,IAAI,CAACI,KAAK,CAACC,MAAM,CAACE;;;OAGpC,CAAC,CAAC;IACL,CAAC,CAAC,EACFnC,UAAU,CAAEuB,KAAwB,IAAI;MACtCC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAGAa,gBAAgBA,CAACJ,KAAU;IACzB,IAAI,CAACzB,cAAc,GAAGyB,KAAK;EAC7B;EAGAK,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC9B,cAAc;EAC5B;EAAC,QAAA+B,CAAA,G;qBAxEUpC,YAAY,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZzC,YAAY;IAAA0C,OAAA,EAAZ1C,YAAY,CAAA2C,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}