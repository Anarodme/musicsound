{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, Input } from '@angular/core';\nexport let PlayerControlsComponent = class PlayerControlsComponent {\n  constructor(mediaService) {\n    this.mediaService = mediaService;\n    this.songs = [];\n    this.playIcon = 'fa-play';\n    this.audioContext = null;\n    this.isPlaying = false;\n  }\n  ngOnInit() {\n    this.setupAudioEvents();\n    this.audioContext = new AudioContext();\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(song => {\n      if (song) {\n        this.selectedSong = song;\n        this.loadAndPlayAudio(song.audio);\n        this.printNextAndPreviousSongs();\n      }\n    });\n    this.mediaService.currentAlbum$.subscribe(album => {\n      this.currentAlbum = album;\n      this.songs = album.songs;\n      this.selectedSong = null;\n    });\n  }\n  ngOnDestroy() {\n    this.pause();\n    this.audioPlayer.nativeElement.removeEventListener('ended', this.handleEnded.bind(this));\n    this.audioPlayer.nativeElement.removeEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    clearInterval(this.progressInterval);\n  }\n  setupAudioEvents() {\n    this.audioPlayer.nativeElement.addEventListener('ended', this.handleEnded.bind(this));\n    this.audioPlayer.nativeElement.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n  }\n  handleEnded() {\n    this.play_next_song();\n  }\n  loadAndPlayAudio(audioUrl) {\n    this.pause();\n    this.audioPlayer.nativeElement.src = audioUrl;\n    this.audioPlayer.nativeElement.load();\n    this.audioPlayer.nativeElement.play().then(() => {\n      console.log('Reproduciendo...');\n      this.playIcon = 'fa-pause';\n      this.isPlaying = true;\n      this.startProgressInterval();\n    }).catch(error => {\n      console.error('Error al reproducir el audio:', error);\n    });\n  }\n  play() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      this.audioPlayer.nativeElement.play();\n      console.log('Reproduciendo...');\n      this.playIcon = 'fa-pause';\n      this.isPlaying = true;\n      this.startProgressInterval();\n    }\n  }\n  pause() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      this.audioPlayer.nativeElement.pause();\n      console.log('Pausado...');\n      this.playIcon = 'fa-play';\n      this.isPlaying = false;\n      clearInterval(this.progressInterval);\n    }\n  }\n  togglePlayPause() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      if (this.audioPlayer.nativeElement.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  }\n  playSong(song, album) {\n    this.mediaService.setCurrentSong(song);\n    this.mediaService.setCurrentAlbum(album);\n  }\n  printNextAndPreviousSongs() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      const nextSong = this.songs[nextIndex];\n      console.log('Canción actual:', this.selectedSong);\n      console.log('Canción anterior:', previousSong);\n      console.log('Siguiente canción:', nextSong);\n    }\n  }\n  play_next_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const nextSong = this.songs[nextIndex];\n      if (nextSong) {\n        this.selectedSong = nextSong;\n        this.loadAndPlayAudio(nextSong.audio);\n        this.printNextAndPreviousSongs();\n      }\n    }\n  }\n  play_previous_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      if (previousSong) {\n        this.selectedSong = previousSong;\n        this.loadAndPlayAudio(previousSong.audio);\n        this.printNextAndPreviousSongs();\n      }\n    }\n  }\n  handleTimeUpdate(event) {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      const progress = this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration * 100;\n      const progressBar = document.getElementById('progressBar');\n      if (progressBar) {\n        progressBar.value = progress.toString();\n      }\n    }\n  }\n  handleProgressBar(event) {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      const progress = event.target.value;\n      const duration = this.audioPlayer.nativeElement.duration;\n      if (!isNaN(duration) && isFinite(duration)) {\n        const newTime = duration * progress / 100;\n        if (!isNaN(newTime) && isFinite(newTime)) {\n          this.audioPlayer.nativeElement.currentTime = newTime;\n        }\n      }\n    }\n  }\n  formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  }\n  startProgressInterval() {\n    clearInterval(this.progressInterval);\n    this.progressInterval = setInterval(() => {\n      if (this.audioPlayer && this.audioPlayer.nativeElement) {\n        const progress = this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration * 100;\n        const progressBar = document.getElementById('progressBar');\n        if (progressBar) {\n          progressBar.value = progress.toString();\n        }\n      }\n    }, 1000);\n  }\n};\n__decorate([ViewChild('audioPlayer', {\n  static: true\n})], PlayerControlsComponent.prototype, \"audioPlayer\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"selectedSong\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"songs\", void 0);\nPlayerControlsComponent = __decorate([Component({\n  selector: 'app-player-controls',\n  templateUrl: './player-controls.component.html',\n  styleUrls: ['./player-controls.component.css']\n})], PlayerControlsComponent);","map":{"version":3,"names":["Component","ViewChild","Input","PlayerControlsComponent","constructor","mediaService","songs","playIcon","audioContext","isPlaying","ngOnInit","setupAudioEvents","AudioContext","currentSongSubscription","currentSong$","subscribe","song","selectedSong","loadAndPlayAudio","audio","printNextAndPreviousSongs","currentAlbum$","album","currentAlbum","ngOnDestroy","pause","audioPlayer","nativeElement","removeEventListener","handleEnded","bind","handleTimeUpdate","clearInterval","progressInterval","addEventListener","play_next_song","audioUrl","src","load","play","then","console","log","startProgressInterval","catch","error","togglePlayPause","paused","playSong","setCurrentSong","setCurrentAlbum","length","currentIndex","findIndex","id","previousIndex","nextIndex","previousSong","nextSong","play_previous_song","event","progress","currentTime","duration","progressBar","document","getElementById","value","toString","handleProgressBar","target","isNaN","isFinite","newTime","formatTime","seconds","minutes","Math","floor","remainingSeconds","setInterval","__decorate","static","selector","templateUrl","styleUrls"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Components\\album\\songs\\songs.component.ts"],"sourcesContent":["import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ElementRef,\r\n  Input,\r\n} from '@angular/core';\r\nimport { MediaService } from 'src/app/Services/player-control/media.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-player-controls',\r\n  templateUrl: './player-controls.component.html',\r\n  styleUrls: ['./player-controls.component.css'],\r\n})\r\nexport class PlayerControlsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('audioPlayer', { static: true })\r\n  audioPlayer!: ElementRef<HTMLAudioElement>;\r\n\r\n  @Input() selectedSong: any;\r\n  @Input() songs: any[] = [];\r\n\r\n  currentSongSubscription: Subscription;\r\n  playIcon: string = 'fa-play';\r\n  audioContext: AudioContext | null = null;\r\n  isPlaying: boolean = false;\r\n  progressInterval: any;\r\n  currentAlbum: any;\r\n\r\n  constructor(private mediaService: MediaService) {}\r\n\r\n  ngOnInit() {\r\n    this.setupAudioEvents();\r\n    this.audioContext = new AudioContext();\r\n\r\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(\r\n      (song) => {\r\n        if (song) {\r\n          this.selectedSong = song;\r\n          this.loadAndPlayAudio(song.audio);\r\n          this.printNextAndPreviousSongs();\r\n        }\r\n      }\r\n    );\r\n\r\n    this.mediaService.currentAlbum$.subscribe((album) => {\r\n      this.currentAlbum = album;\r\n      this.songs = album.songs;\r\n      this.selectedSong = null;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pause();\r\n    this.audioPlayer.nativeElement.removeEventListener(\r\n      'ended',\r\n      this.handleEnded.bind(this)\r\n    );\r\n    this.audioPlayer.nativeElement.removeEventListener(\r\n      'timeupdate',\r\n      this.handleTimeUpdate.bind(this)\r\n    );\r\n    clearInterval(this.progressInterval);\r\n  }\r\n\r\n  setupAudioEvents() {\r\n    this.audioPlayer.nativeElement.addEventListener(\r\n      'ended',\r\n      this.handleEnded.bind(this)\r\n    );\r\n    this.audioPlayer.nativeElement.addEventListener(\r\n      'timeupdate',\r\n      this.handleTimeUpdate.bind(this)\r\n    );\r\n  }\r\n\r\n  handleEnded() {\r\n    this.play_next_song();\r\n  }\r\n\r\n  loadAndPlayAudio(audioUrl: string) {\r\n    this.pause();\r\n    this.audioPlayer.nativeElement.src = audioUrl;\r\n    this.audioPlayer.nativeElement.load();\r\n    this.audioPlayer.nativeElement.play().then(() => {\r\n      console.log('Reproduciendo...');\r\n      this.playIcon = 'fa-pause';\r\n      this.isPlaying = true;\r\n      this.startProgressInterval();\r\n    }).catch(error => {\r\n      console.error('Error al reproducir el audio:', error);\r\n    });\r\n  }\r\n\r\n  play() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      this.audioPlayer.nativeElement.play();\r\n      console.log('Reproduciendo...');\r\n      this.playIcon = 'fa-pause';\r\n      this.isPlaying = true;\r\n      this.startProgressInterval();\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      this.audioPlayer.nativeElement.pause();\r\n      console.log('Pausado...');\r\n      this.playIcon = 'fa-play';\r\n      this.isPlaying = false;\r\n      clearInterval(this.progressInterval);\r\n    }\r\n  }\r\n\r\n  togglePlayPause() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      if (this.audioPlayer.nativeElement.paused) {\r\n        this.play();\r\n      } else {\r\n        this.pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  playSong(song: any, album: any) {\r\n    this.mediaService.setCurrentSong(song);\r\n    this.mediaService.setCurrentAlbum(album);\r\n  }\r\n\r\n  printNextAndPreviousSongs() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n\r\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n\r\n      const previousSong = this.songs[previousIndex];\r\n      const nextSong = this.songs[nextIndex];\r\n\r\n      console.log('Canción actual:', this.selectedSong);\r\n      console.log('Canción anterior:', previousSong);\r\n      console.log('Siguiente canción:', nextSong);\r\n    }\r\n  }\r\n\r\n  play_next_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n      const nextSong = this.songs[nextIndex];\r\n      if (nextSong) {\r\n        this.selectedSong = nextSong;\r\n        this.loadAndPlayAudio(nextSong.audio);\r\n        this.printNextAndPreviousSongs();\r\n      }\r\n    }\r\n  }\r\n\r\n  play_previous_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const previousSong = this.songs[previousIndex];\r\n      if (previousSong) {\r\n        this.selectedSong = previousSong;\r\n        this.loadAndPlayAudio(previousSong.audio);\r\n        this.printNextAndPreviousSongs();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTimeUpdate(event: any) {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      const progress = (this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration) * 100;\r\n      const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n      if (progressBar) {\r\n        progressBar.value = progress.toString();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleProgressBar(event: any) {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      const progress = event.target.value;\r\n      const duration = this.audioPlayer.nativeElement.duration;\r\n\r\n      if (!isNaN(duration) && isFinite(duration)) {\r\n        const newTime = (duration * progress) / 100;\r\n        if (!isNaN(newTime) && isFinite(newTime)) {\r\n          this.audioPlayer.nativeElement.currentTime = newTime;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  formatTime(seconds: number): string {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = Math.floor(seconds % 60);\r\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n  }\r\n\r\n  startProgressInterval() {\r\n    clearInterval(this.progressInterval);\r\n    this.progressInterval = setInterval(() => {\r\n      if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n        const progress = (this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration) * 100;\r\n        const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n        if (progressBar) {\r\n          progressBar.value = progress.toString();\r\n        }\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}