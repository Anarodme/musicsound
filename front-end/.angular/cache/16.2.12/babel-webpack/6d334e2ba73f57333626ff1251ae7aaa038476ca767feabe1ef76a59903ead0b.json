{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PodcastServiceService {\n  constructor(Http) {\n    this.Http = Http;\n    this.apiUrl = 'http://127.0.0.1:8000/';\n  }\n  //Obtener las categorías de los podcasts\n  GetAllPodcastCategories() {\n    const url = `${this.apiUrl}PodcastCategories/`;\n    return this.Http.get(url);\n  }\n  //Obtener todos los podcasts\n  GetMyPodcasts(idUser) {\n    return this.Http.get(`${this.apiUrl}api/user/${idUser}/podcasts/`);\n  }\n  // Obtener podcasts por category ID\n  getPodcastsByCategory(categoryId) {\n    const url = `${this.apiUrl}api/podcast/${categoryId}/`;\n    return this.Http.get(url).pipe();\n  }\n  // Obtener lods episodios de un podcast\n  getEpisodesByPodcastId(podcast_id) {\n    const url = `${this.apiUrl}api/podcast/${podcast_id}/episodes/`;\n    return this.Http.get(url).pipe();\n  }\n  create_podcast(data) {\n    return this.Http.post(`${this.apiUrl}api/podcasts/create/`, data);\n  }\n  update_podcast(data) {\n    return this.Http.post(`${this.apiUrl}api/podcasts/update/`, data);\n  }\n  delete_podcast(idPodcast) {\n    return this.Http.delete(`${this.apiUrl}api/podcast/${idPodcast}/delete/`);\n  }\n  getPodcastsByList(data) {\n    return this.Http.post(`${this.apiUrl}api/get/podcasts/`, data);\n  }\n  static #_ = this.ɵfac = function PodcastServiceService_Factory(t) {\n    return new (t || PodcastServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PodcastServiceService,\n    factory: PodcastServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PodcastServiceService","constructor","Http","apiUrl","GetAllPodcastCategories","url","get","GetMyPodcasts","idUser","getPodcastsByCategory","categoryId","pipe","getEpisodesByPodcastId","podcast_id","create_podcast","data","post","update_podcast","delete_podcast","idPodcast","delete","getPodcastsByList","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\Podcast\\podcast-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PodcastServiceService {\r\n  private apiUrl:string = 'http://127.0.0.1:8000/';\r\n\r\n  constructor(private Http:HttpClient) { }\r\n\r\n\r\n  //Obtener las categorías de los podcasts\r\n  GetAllPodcastCategories(): Observable<any> {\r\n    const url = `${this.apiUrl}PodcastCategories/`;\r\n    return this.Http.get<any>(url);\r\n\r\n  }\r\n\r\n  //Obtener todos los podcasts\r\n  GetMyPodcasts(idUser:number): Observable<any> {\r\n    return this.Http.get<any>(`${this.apiUrl}api/user/${idUser}/podcasts/`);\r\n  }\r\n\r\n    // Obtener podcasts por category ID\r\n    getPodcastsByCategory(categoryId: number): Observable<any> {\r\n      const url = `${this.apiUrl}api/podcast/${categoryId}/`;\r\n      return this.Http.get<any>(url).pipe()\r\n    \r\n    }\r\n  \r\n    // Obtener lods episodios de un podcast\r\n    getEpisodesByPodcastId(podcast_id: number): Observable<any[]> {\r\n      const url = `${this.apiUrl}api/podcast/${podcast_id}/episodes/`;\r\n      return this.Http.get<any[]>(url).pipe();\r\n    }\r\n\r\n\r\n  create_podcast(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/podcasts/create/`,data);\r\n  }\r\n  \r\n  update_podcast(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/podcasts/update/`,data);\r\n  }\r\n\r\n  delete_podcast(idPodcast:number): Observable<any> {\r\n    return this.Http.delete<any>(`${this.apiUrl}api/podcast/${idPodcast}/delete/`);\r\n  }\r\n\r\n\r\n  getPodcastsByList(data:any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/get/podcasts/`,data);\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n"],"mappings":";;AAOA,OAAM,MAAOA,qBAAqB;EAGhCC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAU,wBAAwB;EAET;EAGvC;EACAC,uBAAuBA,CAAA;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,oBAAoB;IAC9C,OAAO,IAAI,CAACD,IAAI,CAACI,GAAG,CAAMD,GAAG,CAAC;EAEhC;EAEA;EACAE,aAAaA,CAACC,MAAa;IACzB,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAM,GAAG,IAAI,CAACH,MAAM,YAAYK,MAAM,YAAY,CAAC;EACzE;EAEE;EACAC,qBAAqBA,CAACC,UAAkB;IACtC,MAAML,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,eAAeO,UAAU,GAAG;IACtD,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAMD,GAAG,CAAC,CAACM,IAAI,EAAE;EAEvC;EAEA;EACAC,sBAAsBA,CAACC,UAAkB;IACvC,MAAMR,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,eAAeU,UAAU,YAAY;IAC/D,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAQD,GAAG,CAAC,CAACM,IAAI,EAAE;EACzC;EAGFG,cAAcA,CAACC,IAAS;IACtB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,sBAAsB,EAACY,IAAI,CAAC;EACvE;EAEAE,cAAcA,CAACF,IAAS;IACtB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,sBAAsB,EAACY,IAAI,CAAC;EACvE;EAEAG,cAAcA,CAACC,SAAgB;IAC7B,OAAO,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAM,GAAG,IAAI,CAACjB,MAAM,eAAegB,SAAS,UAAU,CAAC;EAChF;EAGAE,iBAAiBA,CAACN,IAAQ;IACxB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,mBAAmB,EAACY,IAAI,CAAC;EACpE;EAAC,QAAAO,CAAA,G;qBA/CUtB,qBAAqB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArB3B,qBAAqB;IAAA4B,OAAA,EAArB5B,qBAAqB,CAAA6B,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}