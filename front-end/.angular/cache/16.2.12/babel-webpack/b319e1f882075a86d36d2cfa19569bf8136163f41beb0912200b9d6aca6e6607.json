{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ModalPlaylistsComponent } from './modal-playlists/modal-playlists.component';\nexport let SongsComponent = class SongsComponent {\n  constructor(route, mediaService, albumService, FavoritesService, dialog) {\n    this.route = route;\n    this.mediaService = mediaService;\n    this.albumService = albumService;\n    this.FavoritesService = FavoritesService;\n    this.dialog = dialog;\n    this.selectedSong = null;\n    this.currentSongIndex = -1;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.album_Id = +params.get('albumId');\n      if (this.album_Id) {\n        this.fetchAlbums(this.album_Id);\n      }\n    });\n    this.mediaService.currentSong$.subscribe(song => {\n      this.selectedSong = song;\n    });\n  }\n  fetchAlbums(album_Id) {\n    this.albumService.getSongOfAlbum(album_Id).subscribe(data => {\n      this.albums = {\n        songs: data.map(song => ({\n          id: song.id,\n          songTitle: song.songTitle,\n          audio: song.audio,\n          duration: song.duration,\n          album: {\n            id: song.album.id,\n            albumTitle: song.album.albumTitle,\n            releaseDate: song.album.releaseDate,\n            coverImage: song.album.coverImage,\n            artist: {\n              id: song.album.artist.id,\n              artistName: song.album.artist.artistName,\n              description: song.album.artist.description\n            }\n          }\n        }))\n      };\n      console.log('Playlist:', this.playlist);\n    }, error => {\n      console.error('Error fetching playlist:', error);\n    });\n  }\n  // Toggles the favorite status of a song\n  toggleFavorite(song) {\n    // Toggle the favorite status of the song\n    song.favorite = !song.favorite;\n    // If the song is marked as favorite, add it to the liked songs\n    if (song.favorite) {\n      const songId = song.id;\n      this.FavoritesService.addToLikedSongs(songId);\n      console.log(songId);\n    }\n  }\n  playSong(song) {\n    try {\n      console.log('Canci贸n seleccionada para reproducir:', song);\n      this.mediaService.setCurrentSong({\n        ...song,\n        songs: this.albums.songs\n      });\n      this.selectedSong = {\n        ...song,\n        songs: this.albums.songs\n      };\n      console.log('Canci贸n seleccionada:', this.selectedSong);\n    } catch (error) {\n      console.error('Error playing song:', error);\n    }\n  }\n  // Opens the modal dialog for selecting a playlist\n  modalPlaylist(selectedSong) {\n    // Open the modal dialog with the selected song data\n    const dialogRef = this.dialog.open(ModalPlaylistsComponent, {\n      data: {\n        selectedSong\n      }\n    });\n    // Subscribe to the dialog close event\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n};\nSongsComponent = __decorate([Component({\n  selector: 'app-songs',\n  templateUrl: './songs.component.html',\n  styleUrls: ['./songs.component.css']\n})], SongsComponent);","map":{"version":3,"names":["Component","ModalPlaylistsComponent","SongsComponent","constructor","route","mediaService","albumService","FavoritesService","dialog","selectedSong","currentSongIndex","ngOnInit","paramMap","subscribe","params","album_Id","get","fetchAlbums","currentSong$","song","getSongOfAlbum","data","albums","songs","map","id","songTitle","audio","duration","album","albumTitle","releaseDate","coverImage","artist","artistName","description","console","log","playlist","error","toggleFavorite","favorite","songId","addToLikedSongs","playSong","setCurrentSong","modalPlaylist","dialogRef","open","afterClosed","result","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Components\\album\\songs\\songs.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MediaService } from '../../../Services/player-control/media.service';\r\nimport { AlbumService } from 'src/app/Services/Album/album.service';\r\nimport { FavoritesService } from 'src/app/Services/Favorites/favorites.service';\r\nimport { ModalPlaylistsComponent } from './modal-playlists/modal-playlists.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-songs',\r\n  templateUrl: './songs.component.html',\r\n  styleUrls: ['./songs.component.css']\r\n})\r\nexport class SongsComponent implements OnInit {\r\n  [x: string]: any;\r\n\r\n  album_Id: number | undefined;\r\n  selectedSong: any = null;\r\n  currentSongIndex: number = -1;\r\n  albums: any;\r\n\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private mediaService: MediaService,\r\n    private albumService: AlbumService,\r\n    private FavoritesService: FavoritesService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n      this.album_Id = +params.get('albumId');\r\n      if (this.album_Id) {\r\n        this.fetchAlbums(this.album_Id);\r\n      }\r\n    });\r\n    this.mediaService.currentSong$.subscribe((song) => {\r\n      this.selectedSong = song;\r\n    });\r\n  }\r\n\r\n  fetchAlbums(album_Id: number) {\r\n    this.albumService.getSongOfAlbum(album_Id).subscribe(\r\n      (data: any) => {\r\n        this.albums = {\r\n          songs: data.map((song: any) => ({\r\n            id: song.id,\r\n            songTitle: song.songTitle,\r\n            audio: song.audio,\r\n            duration: song.duration,\r\n            album: {\r\n              id: song.album.id,\r\n              albumTitle: song.album.albumTitle,\r\n              releaseDate: song.album.releaseDate,\r\n              coverImage: song.album.coverImage,\r\n              artist: {\r\n                id: song.album.artist.id,\r\n                artistName: song.album.artist.artistName,\r\n                description: song.album.artist.description,\r\n              },\r\n            },\r\n          })),\r\n        };\r\n        console.log('Playlist:', this.playlist);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching playlist:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Toggles the favorite status of a song\r\n  toggleFavorite(song: any) {\r\n    // Toggle the favorite status of the song\r\n    song.favorite = !song.favorite;\r\n\r\n    // If the song is marked as favorite, add it to the liked songs\r\n    if (song.favorite) {\r\n      const songId = song.id;\r\n      this.FavoritesService.addToLikedSongs(songId);\r\n      console.log(songId);\r\n    }\r\n  }\r\n\r\n  playSong(song: any) {\r\n    try {\r\n      console.log('Canci贸n seleccionada para reproducir:', song);\r\n      this.mediaService.setCurrentSong({ ...song, songs: this.albums.songs });\r\n      this.selectedSong = { ...song, songs: this.albums.songs };\r\n      console.log('Canci贸n seleccionada:', this.selectedSong);\r\n    } catch (error) {\r\n      console.error('Error playing song:', error);\r\n    }\r\n  }\r\n\r\n  // Opens the modal dialog for selecting a playlist\r\n  modalPlaylist(selectedSong: any) {\r\n    // Open the modal dialog with the selected song data\r\n    const dialogRef = this.dialog.open(ModalPlaylistsComponent, {\r\n      data: { selectedSong }\r\n    });\r\n\r\n    // Subscribe to the dialog close event\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed');\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}