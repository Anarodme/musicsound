{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FavoritesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://127.0.0.1:8000';\n  }\n  // Method to add songs to favorites\n  addToLikedSongs(songId, libraryId) {\n    const url = `${this.apiUrl}/api/favorite-list/add-song/`;\n    const payload = {\n      favoritelist_id: libraryId,\n      song_id: songId\n    };\n    this.http.post(url, payload).subscribe(response => {\n      console.log('Canción añadida a favoritos:', response);\n    }, error => {\n      console.error('Error al añadir canción a favoritos:', error);\n    });\n  }\n  // Method to add podcasts to favorites\n  addToLikedPodcasts(podcastId, libraryId) {\n    const url = `${this.apiUrl}/api/favorite-list/add-podcast/`;\n    const payload = {\n      favoritelist_id: libraryId,\n      podcast_id: podcastId\n    };\n    this.http.post(url, payload).subscribe(response => {\n      console.log('Podcast añadido a favoritos:', response);\n    }, error => {\n      console.error('Error al añadir podcast a favoritos:', error);\n    });\n  }\n  // Method to get the favorites by libraryId\n  getFavorites(libraryid) {\n    return this.http.get(`${this.apiUrl}/api/library/${libraryid}/favorite-list/`);\n  }\n  static #_ = this.ɵfac = function FavoritesService_Factory(t) {\n    return new (t || FavoritesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FavoritesService,\n    factory: FavoritesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FavoritesService","constructor","http","apiUrl","addToLikedSongs","songId","libraryId","url","payload","favoritelist_id","song_id","post","subscribe","response","console","log","error","addToLikedPodcasts","podcastId","podcast_id","getFavorites","libraryid","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\Favorites\\favorites.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin, Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FavoritesService {\r\n\r\n  private apiUrl = 'http://127.0.0.1:8000';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  // Method to add songs to favorites\r\n  addToLikedSongs(songId: number, libraryId: number) {\r\n    const url = `${this.apiUrl}/api/favorite-list/add-song/`;\r\n    const payload = { favoritelist_id: libraryId, song_id: songId };\r\n\r\n    this.http.post(url, payload).subscribe(\r\n      response => {\r\n        console.log('Canción añadida a favoritos:', response);\r\n      },\r\n      error => {\r\n        console.error('Error al añadir canción a favoritos:', error);\r\n      }\r\n    );\r\n  }\r\n  // Method to add podcasts to favorites\r\n  addToLikedPodcasts(podcastId: number, libraryId: number) {\r\n    const url = `${this.apiUrl}/api/favorite-list/add-podcast/`;\r\n    const payload = { favoritelist_id: libraryId, podcast_id: podcastId };\r\n\r\n    this.http.post(url, payload).subscribe(\r\n      response => {\r\n        console.log('Podcast añadido a favoritos:', response);\r\n      },\r\n      error => {\r\n        console.error('Error al añadir podcast a favoritos:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  // Method to get the favorites by libraryId\r\n  getFavorites(libraryid: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/api/library/${libraryid}/favorite-list/`);\r\n  }\r\n\r\n}\r\n"],"mappings":";;AAQA,OAAM,MAAOA,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAEA;EAGxC;EACAC,eAAeA,CAACC,MAAc,EAAEC,SAAiB;IAC/C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,8BAA8B;IACxD,MAAMK,OAAO,GAAG;MAAEC,eAAe,EAAEH,SAAS;MAAEI,OAAO,EAAEL;IAAM,CAAE;IAE/D,IAAI,CAACH,IAAI,CAACS,IAAI,CAACJ,GAAG,EAAEC,OAAO,CAAC,CAACI,SAAS,CACpCC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;IACvD,CAAC,EACDG,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CACF;EACH;EACA;EACAC,kBAAkBA,CAACC,SAAiB,EAAEZ,SAAiB;IACrD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,iCAAiC;IAC3D,MAAMK,OAAO,GAAG;MAAEC,eAAe,EAAEH,SAAS;MAAEa,UAAU,EAAED;IAAS,CAAE;IAErE,IAAI,CAAChB,IAAI,CAACS,IAAI,CAACJ,GAAG,EAAEC,OAAO,CAAC,CAACI,SAAS,CACpCC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;IACvD,CAAC,EACDG,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CACF;EACH;EAGA;EACAI,YAAYA,CAACC,SAAiB;IAC5B,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAM,GAAG,IAAI,CAACnB,MAAM,gBAAgBkB,SAAS,iBAAiB,CAAC;EACrF;EAAC,QAAAE,CAAA,G;qBAxCUvB,gBAAgB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB5B,gBAAgB;IAAA6B,OAAA,EAAhB7B,gBAAgB,CAAA8B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}