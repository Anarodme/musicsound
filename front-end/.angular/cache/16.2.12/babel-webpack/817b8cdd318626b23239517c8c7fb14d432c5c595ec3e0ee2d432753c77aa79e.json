{"ast":null,"code":"import { catchError, map, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PodcastServiceService {\n  constructor(Http) {\n    this.Http = Http;\n    this.apiUrl = 'http://127.0.0.1:8000/';\n  }\n  //Obtener las categorías de los podcasts\n  GetAllPodcastCategories() {\n    const url = `${this.apiUrl}PodcastCategories/`;\n    return this.Http.get(url).pipe(map(podcasts => {\n      return podcasts.map(podcast => ({\n        id: podcast.id,\n        name: podcast.name,\n        coverImage: `${this.apiUrl}${podcast.coverImage}`\n      }));\n    }));\n  }\n  //Obtener todos los podcasts\n  GetMyPodcasts(idUser) {\n    return this.Http.get(`${this.apiUrl}api/user/${idUser}/podcasts/`);\n  }\n  // Obtener podcasts por category ID\n  getPodcastsByCategory(categoryId) {\n    const url = `${this.apiUrl}api/podcast/${categoryId}/`;\n    console.log('Calling API with URL:', url);\n    return this.Http.get(url).pipe(map(podcasts => {\n      return podcasts.map(podcast => ({\n        id: podcast.id,\n        category_id: podcast.category,\n        podcastTitle: podcast.podcastTitle,\n        coverImage: `${this.apiUrl}${podcast.coverImage}`\n      }));\n    }));\n  }\n  // Obtener lods episodios de un podcast\n  getEpisodesByPodcastId(podcast_id) {\n    const url = `${this.apiUrl}api/podcast/${podcast_id}/episodes/`;\n    console.log('Calling API with URL:', url);\n    return this.Http.get(url).pipe(map(episodes => {\n      return episodes.map(episode => ({\n        id: episode.id,\n        episodeTitle: episode.episodeTitle,\n        duration: episode.duration,\n        episode: episode.episode,\n        description: episode.description,\n        releaseDate: episode.releaseDate,\n        live: episode.live,\n        podcast: {\n          id: episode.podcast.id,\n          podcastTitle: episode.podcast.podcastTitle,\n          category: {\n            id: episode.podcast.category.id,\n            name: episode.podcast.category.name,\n            coverImage: `${this.apiUrl}${episode.podcast.category.coverImage}`\n          },\n          coverImage: `${this.apiUrl}${episode.podcast.coverImage}`,\n          description: episode.podcast.description,\n          user: {\n            id: episode.podcast.user.id,\n            username: episode.podcast.user.username\n          },\n          releaseDate: episode.podcast.releaseDate\n        }\n      }));\n    }), catchError(error => {\n      console.error('Error fetching podcasts by category ID:', error);\n      return throwError(error);\n    }));\n  }\n  create_podcast(data) {\n    return this.Http.post(`${this.apiUrl}api/podcasts/create/`, data);\n  }\n  update_podcast(data) {\n    return this.Http.post(`${this.apiUrl}api/podcasts/update/`, data);\n  }\n  delete_podcast(idPodcast) {\n    return this.Http.delete(`${this.apiUrl}api/podcast/${idPodcast}/delete/`);\n  }\n  getPodcastsByList(data) {\n    return this.Http.post(`${this.apiUrl}api/get/podcasts/`, data);\n  }\n  static #_ = this.ɵfac = function PodcastServiceService_Factory(t) {\n    return new (t || PodcastServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PodcastServiceService,\n    factory: PodcastServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","throwError","PodcastServiceService","constructor","Http","apiUrl","GetAllPodcastCategories","url","get","pipe","podcasts","podcast","id","name","coverImage","GetMyPodcasts","idUser","getPodcastsByCategory","categoryId","console","log","category_id","category","podcastTitle","getEpisodesByPodcastId","podcast_id","episodes","episode","episodeTitle","duration","description","releaseDate","live","user","username","error","create_podcast","data","post","update_podcast","delete_podcast","idPodcast","delete","getPodcastsByList","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\Podcast\\podcast-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PodcastServiceService {\r\n  private apiUrl:string = 'http://127.0.0.1:8000/';\r\n\r\n  constructor(private Http:HttpClient) { }\r\n\r\n\r\n  //Obtener las categorías de los podcasts\r\n  GetAllPodcastCategories(): Observable<any> {\r\n    const url = `${this.apiUrl}PodcastCategories/`);\r\n    return this.Http.get<any>(url).pipe(\r\n      map(podcasts => {\r\n        return podcasts.map(podcast => ({\r\n          id: podcast.id,\r\n          name: podcast.name,\r\n          coverImage: `${this.apiUrl}${podcast.coverImage}`\r\n        }));\r\n      })\r\n    );\r\n  }\r\n  \r\n\r\n  //Obtener todos los podcasts\r\n  GetMyPodcasts(idUser:number): Observable<any> {\r\n    return this.Http.get<any>(`${this.apiUrl}api/user/${idUser}/podcasts/`);\r\n  }\r\n\r\n    // Obtener podcasts por category ID\r\n    getPodcastsByCategory(categoryId: number): Observable<any> {\r\n      const url = `${this.apiUrl}api/podcast/${categoryId}/`;\r\n      console.log('Calling API with URL:', url);\r\n  \r\n      return this.Http.get<any>(url).pipe(\r\n        map(podcasts => {\r\n          return podcasts.map(podcast => ({\r\n            id: podcast.id,\r\n            category_id: podcast.category,\r\n            podcastTitle: podcast.podcastTitle,\r\n            coverImage: `${this.apiUrl}${podcast.coverImage}`\r\n          }));\r\n        })\r\n      );\r\n    }\r\n  \r\n    // Obtener lods episodios de un podcast\r\n    getEpisodesByPodcastId(podcast_id: number): Observable<any[]> {\r\n      const url = `${this.apiUrl}api/podcast/${podcast_id}/episodes/`;\r\n      console.log('Calling API with URL:', url);\r\n      \r\n      return this.Http.get<any[]>(url).pipe(\r\n        map(episodes => {\r\n          return episodes.map(episode => ({\r\n            id: episode.id,\r\n            episodeTitle: episode.episodeTitle,\r\n            duration: episode.duration,\r\n            episode: episode.episode,\r\n            description: episode.description,\r\n            releaseDate: episode.releaseDate,\r\n            live: episode.live,\r\n            podcast: {\r\n              id: episode.podcast.id,\r\n              podcastTitle: episode.podcast.podcastTitle,\r\n              category: {\r\n                id: episode.podcast.category.id,\r\n                name: episode.podcast.category.name,\r\n                coverImage: `${this.apiUrl}${episode.podcast.category.coverImage}`\r\n              },\r\n              coverImage:  `${this.apiUrl}${episode.podcast.coverImage}`,\r\n              description: episode.podcast.description,\r\n              user: {\r\n                id: episode.podcast.user.id,\r\n                username: episode.podcast.user.username,\r\n              },\r\n              releaseDate: episode.podcast.releaseDate\r\n            }\r\n          }));\r\n        }),\r\n        catchError(error => {\r\n          console.error('Error fetching podcasts by category ID:', error);\r\n          return throwError(error);\r\n        })\r\n      );\r\n    }\r\n\r\n\r\n  create_podcast(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/podcasts/create/`,data);\r\n  }\r\n  \r\n  update_podcast(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/podcasts/update/`,data);\r\n  }\r\n\r\n  delete_podcast(idPodcast:number): Observable<any> {\r\n    return this.Http.delete<any>(`${this.apiUrl}api/podcast/${idPodcast}/delete/`);\r\n  }\r\n\r\n\r\n  getPodcastsByList(data:any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}api/get/podcasts/`,data);\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}