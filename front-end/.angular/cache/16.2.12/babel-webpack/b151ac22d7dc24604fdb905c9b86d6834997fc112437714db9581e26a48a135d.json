{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nexport let PlayerControlsComponent = class PlayerControlsComponent {\n  constructor(mediaService, adService) {\n    this.mediaService = mediaService;\n    this.adService = adService;\n    this.songs = [];\n    this.favoriteList = false;\n    this.event = new EventEmitter();\n    this.reproductorP = true;\n    this.playIcon = 'fa-play';\n    this.isPlaying = false;\n    this.contAds = 0;\n  }\n  ngOnInit() {\n    this.setupAudioEvents();\n    // Suscribirse al cambio de la canción actual\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(song => {\n      if (song) {\n        this.selectedSong = song;\n        this.loadAudio(song.audio);\n        this.printNextAndPreviousSongs();\n        this.play();\n      }\n    });\n    console.log(this.Myplaylist);\n  }\n  ngOnDestroy() {\n    // Eliminar el controlador de eventos 'ended'\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      audioPlayer.removeEventListener('ended', this.handleEnded.bind(this));\n      audioPlayer.removeEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    }\n    clearInterval(this.progressInterval);\n    this.currentSongSubscription.unsubscribe();\n  }\n  setupAudioEvents() {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      audioPlayer.addEventListener('ended', this.handleEnded.bind(this));\n      audioPlayer.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    }\n  }\n  handleEnded() {\n    console.log('Canción actual terminada, reproduciendo la siguiente...');\n    this.play_next_song();\n  }\n  loadAudio(audioUrl) {\n    console.log('Cargando audio:', audioUrl);\n    this.mediaService.loadAudio(audioUrl);\n  }\n  onLoadedMetadata() {\n    console.log('Canción cargada completamente');\n    this.play();\n    this.printNextAndPreviousSongs();\n  }\n  play() {\n    this.contAds++;\n    if (this.contAds === 3) {\n      this.adService.showAd().then(data => {\n        this.mediaService.play();\n        this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\n        console.log('Reproduciendo...');\n        this.isPlaying = true;\n        this.startProgressInterval();\n        this.contAds = 0;\n      });\n    } else {\n      this.mediaService.play();\n      this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\n      console.log('Reproduciendo...');\n      this.isPlaying = true;\n      this.startProgressInterval();\n    }\n  }\n  pause() {\n    this.mediaService.pause();\n    this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\n    console.log('Pausado...');\n    this.isPlaying = false;\n    clearInterval(this.progressInterval);\n  }\n  togglePlayPause() {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      if (audioPlayer.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  }\n  selectSong(song) {\n    // Detener la reproducción de la canción actual antes de seleccionar una nueva\n    this.pause();\n    this.mediaService.setCurrentSong(song);\n    this.selectedSong = song;\n    this.printNextAndPreviousSongs();\n  }\n  printNextAndPreviousSongs() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      const nextSong = this.songs[nextIndex];\n      console.log('Canción actual:', this.selectedSong);\n      console.log('Canción anterior:', previousSong);\n      console.log('Siguiente canción:', nextSong);\n    }\n  }\n  play_next_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const nextSong = this.songs[nextIndex];\n      if (nextSong) {\n        console.log('Siguiente canción:', nextSong);\n        this.selectedSong = nextSong;\n        this.loadAudio(nextSong.audio);\n        this.play();\n        this.printNextAndPreviousSongs();\n      } else {\n        console.log('¡La siguiente canción es indefinida!');\n      }\n    }\n  }\n  play_previous_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      if (previousSong) {\n        console.log('Canción anterior:', previousSong);\n        this.selectedSong = previousSong;\n        this.loadAudio(previousSong.audio);\n        this.play();\n        this.printNextAndPreviousSongs();\n      } else {\n        console.log('¡La canción anterior es indefinida!');\n      }\n    }\n  }\n  handleTimeUpdate(event) {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      const progress = audioPlayer.currentTime / audioPlayer.duration * 100;\n      const progressBar = document.getElementById('progressBar');\n      if (progressBar) {\n        progressBar.value = progress.toString();\n      }\n      this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\n      this.updateTimeDisplay(); // Actualizar la visualización de tiempo\n    }\n  }\n\n  updatePlayIcon() {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      const isPlaying = !audioPlayer.paused;\n      const newPlayIcon = isPlaying ? 'fa-pause' : 'fa-play';\n      this.playIcon = newPlayIcon;\n      this.isPlaying = isPlaying;\n    }\n  }\n  updateTimeDisplay() {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer && audioPlayer.currentTime !== undefined && audioPlayer.duration !== undefined) {\n      const timeLeft = document.querySelector('.time-left');\n      const timeRight = document.querySelector('.time-right');\n      if (timeLeft && timeRight) {\n        timeLeft.textContent = this.formatTime(audioPlayer.currentTime);\n        timeRight.textContent = this.formatTime(audioPlayer.duration);\n      }\n    }\n  }\n  handleProgressBar(event) {\n    const audioPlayer = this.mediaService.player;\n    if (audioPlayer) {\n      const progress = event.target.value;\n      const duration = audioPlayer.duration;\n      if (!isNaN(duration) && isFinite(duration)) {\n        const newTime = duration * progress / 100;\n        if (!isNaN(newTime) && isFinite(newTime)) {\n          audioPlayer.currentTime = newTime;\n        }\n      }\n    }\n  }\n  formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  }\n  startProgressInterval() {\n    clearInterval(this.progressInterval);\n    this.progressInterval = setInterval(() => {\n      const audioPlayer = this.mediaService.player;\n      if (audioPlayer) {\n        const progress = audioPlayer.currentTime / audioPlayer.duration * 100;\n        const progressBar = document.getElementById('progressBar');\n        if (progressBar) {\n          progressBar.value = progress.toString();\n        }\n      }\n    }, 1000);\n  }\n  //Abrir el music-player cuando dé click en la imagen\n  openMusicPlayer() {\n    if (this.reproductorP === false) {\n      this.reproductorP = true;\n    } else {\n      this.reproductorP = false;\n    }\n    this.event.emit(this.reproductorP);\n  }\n};\n__decorate([ViewChild('audioPlayer', {\n  static: true\n})], PlayerControlsComponent.prototype, \"audioPlayerRef\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"selectedSong\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"songs\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"Myplaylist\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"favoriteList\", void 0);\n__decorate([Output()], PlayerControlsComponent.prototype, \"event\", void 0);\nPlayerControlsComponent = __decorate([Component({\n  selector: 'app-player-controls',\n  templateUrl: './player-controls.component.html',\n  styleUrls: ['./player-controls.component.css']\n})], PlayerControlsComponent);","map":{"version":3,"names":["Component","ViewChild","Input","Output","EventEmitter","PlayerControlsComponent","constructor","mediaService","adService","songs","favoriteList","event","reproductorP","playIcon","isPlaying","contAds","ngOnInit","setupAudioEvents","currentSongSubscription","currentSong$","subscribe","song","selectedSong","loadAudio","audio","printNextAndPreviousSongs","play","console","log","Myplaylist","ngOnDestroy","audioPlayer","player","removeEventListener","handleEnded","bind","handleTimeUpdate","clearInterval","progressInterval","unsubscribe","addEventListener","play_next_song","audioUrl","onLoadedMetadata","showAd","then","data","updatePlayIcon","startProgressInterval","pause","togglePlayPause","paused","selectSong","setCurrentSong","length","currentIndex","findIndex","id","previousIndex","nextIndex","previousSong","nextSong","play_previous_song","progress","currentTime","duration","progressBar","document","getElementById","value","toString","updateTimeDisplay","newPlayIcon","undefined","timeLeft","querySelector","timeRight","textContent","formatTime","handleProgressBar","target","isNaN","isFinite","newTime","seconds","minutes","Math","floor","remainingSeconds","setInterval","openMusicPlayer","emit","__decorate","static","selector","templateUrl","styleUrls"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Components\\player-controls\\player-controls.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { MediaService } from 'src/app/Services/player-control/media.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { AdsService } from 'src/app/Services/ads.service';\r\n\r\n@Component({\r\n  selector: 'app-player-controls',\r\n  templateUrl: './player-controls.component.html',\r\n  styleUrls: ['./player-controls.component.css'],\r\n  \r\n})\r\nexport class PlayerControlsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('audioPlayer', { static: true }) audioPlayerRef: ElementRef<HTMLAudioElement>;\r\n\r\n  @Input() selectedSong: any;\r\n  @Input() songs: any[] = [];\r\n  @Input() Myplaylist:string;\r\n  @Input() favoriteList:boolean = false;\r\n\r\n  @Output() event = new EventEmitter<boolean>();\r\n\r\n  reproductorP = true;\r\n\r\n  currentSongSubscription: Subscription;\r\n  playIcon: string = 'fa-play';\r\n  isPlaying: boolean = false;\r\n  progressInterval: any;\r\n  contAds:number;\r\n\r\n  constructor(private mediaService: MediaService,private adService:AdsService) {this.contAds=0;}\r\n\r\n  ngOnInit() {\r\n    this.setupAudioEvents();\r\n\r\n    // Suscribirse al cambio de la canción actual\r\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(\r\n      (song) => {\r\n        if (song) {\r\n          this.selectedSong = song;\r\n          this.loadAudio(song.audio);\r\n          this.printNextAndPreviousSongs();\r\n          this.play();\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log(this.Myplaylist)\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Eliminar el controlador de eventos 'ended'\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      audioPlayer.removeEventListener('ended', this.handleEnded.bind(this));\r\n      audioPlayer.removeEventListener('timeupdate', this.handleTimeUpdate.bind(this));\r\n    }\r\n    clearInterval(this.progressInterval);\r\n\r\n    this.currentSongSubscription.unsubscribe();\r\n  }\r\n\r\n  setupAudioEvents() {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      audioPlayer.addEventListener('ended', this.handleEnded.bind(this));\r\n      audioPlayer.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\r\n    }\r\n  }\r\n\r\n  handleEnded() {\r\n    console.log('Canción actual terminada, reproduciendo la siguiente...');\r\n    this.play_next_song();\r\n    \r\n  }\r\n\r\n  loadAudio(audioUrl: string) {\r\n    console.log('Cargando audio:', audioUrl);\r\n    this.mediaService.loadAudio(audioUrl);\r\n  }\r\n\r\n  onLoadedMetadata() {\r\n    console.log('Canción cargada completamente');\r\n    this.play();\r\n    this.printNextAndPreviousSongs();\r\n  }\r\n\r\n  play() {\r\n    this.contAds++;\r\n\r\n    if (this.contAds===3) {\r\n        this.adService.showAd().then((data)=>{\r\n          this.mediaService.play();\r\n          this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\r\n          console.log('Reproduciendo...');\r\n          this.isPlaying = true;\r\n          this.startProgressInterval();\r\n          this.contAds=0;\r\n        })\r\n    }else{\r\n      this.mediaService.play();\r\n      this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\r\n      console.log('Reproduciendo...');\r\n      this.isPlaying = true;\r\n      this.startProgressInterval();\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    this.mediaService.pause();\r\n    this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\r\n    console.log('Pausado...');\r\n    this.isPlaying = false;\r\n    clearInterval(this.progressInterval);\r\n  }\r\n\r\n  togglePlayPause() {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      if (audioPlayer.paused) {\r\n        this.play();\r\n      } else {\r\n        this.pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  selectSong(song: any) {\r\n    // Detener la reproducción de la canción actual antes de seleccionar una nueva\r\n    this.pause();\r\n\r\n    this.mediaService.setCurrentSong(song);\r\n    this.selectedSong = song;\r\n    this.printNextAndPreviousSongs();\r\n\r\n  }\r\n\r\n  printNextAndPreviousSongs() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n\r\n      const previousIndex =\r\n        (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n\r\n      const previousSong = this.songs[previousIndex];\r\n      const nextSong = this.songs[nextIndex];\r\n\r\n      console.log('Canción actual:', this.selectedSong);\r\n      console.log('Canción anterior:', previousSong);\r\n      console.log('Siguiente canción:', nextSong);\r\n    }\r\n  }\r\n\r\n  play_next_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n      const nextSong = this.songs[nextIndex];\r\n      if (nextSong) {\r\n        console.log('Siguiente canción:', nextSong);\r\n        this.selectedSong = nextSong;\r\n        this.loadAudio(nextSong.audio);\r\n        this.play()\r\n        this.printNextAndPreviousSongs();\r\n      } else {\r\n        console.log('¡La siguiente canción es indefinida!');\r\n      }\r\n    }\r\n  }\r\n\r\n  play_previous_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const previousIndex =\r\n        (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const previousSong = this.songs[previousIndex];\r\n      if (previousSong) {\r\n        console.log('Canción anterior:', previousSong);\r\n        this.selectedSong = previousSong;\r\n        this.loadAudio(previousSong.audio);\r\n        this.play()\r\n        this.printNextAndPreviousSongs();\r\n      } else {\r\n        console.log('¡La canción anterior es indefinida!');\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTimeUpdate(event: any) {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;\r\n      const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n      if (progressBar) {\r\n        progressBar.value = progress.toString();\r\n      }\r\n      this.updatePlayIcon(); // Actualizar el ícono de reproducción/pausa\r\n      this.updateTimeDisplay(); // Actualizar la visualización de tiempo\r\n    }\r\n  }\r\n\r\n  updatePlayIcon() {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      const isPlaying = !audioPlayer.paused;\r\n      const newPlayIcon = isPlaying ? 'fa-pause' : 'fa-play';\r\n      this.playIcon = newPlayIcon;\r\n      this.isPlaying = isPlaying;\r\n    }\r\n  }\r\n\r\n  updateTimeDisplay() {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer && audioPlayer.currentTime !== undefined && audioPlayer.duration !== undefined) {\r\n      const timeLeft = document.querySelector('.time-left');\r\n      const timeRight = document.querySelector('.time-right');\r\n      if (timeLeft && timeRight) {\r\n        timeLeft.textContent = this.formatTime(audioPlayer.currentTime);\r\n        timeRight.textContent = this.formatTime(audioPlayer.duration);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleProgressBar(event: any) {\r\n  const audioPlayer = this.mediaService.player;\r\n  if (audioPlayer) {\r\n    const progress = event.target.value;\r\n    const duration = audioPlayer.duration;\r\n\r\n    if (!isNaN(duration) && isFinite(duration)) {\r\n      const newTime = (duration * progress) / 100;\r\n      if (!isNaN(newTime) && isFinite(newTime)) {\r\n        audioPlayer.currentTime = newTime;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nformatTime(seconds: number): string {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = Math.floor(seconds % 60);\r\n  return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n}\r\n\r\nstartProgressInterval() {\r\n  clearInterval(this.progressInterval);\r\n  this.progressInterval = setInterval(() => {\r\n    const audioPlayer = this.mediaService.player;\r\n    if (audioPlayer) {\r\n      const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;\r\n      const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n      if (progressBar) {\r\n        progressBar.value = progress.toString();\r\n      }\r\n    }\r\n  }, 1000);\r\n}\r\n\r\n  //Abrir el music-player cuando dé click en la imagen\r\n  openMusicPlayer() {\r\n    if (this.reproductorP === false) {\r\n      this.reproductorP = true;\r\n    }else{\r\n      this.reproductorP = false;\r\n    }\r\n    this.event.emit(this.reproductorP);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}