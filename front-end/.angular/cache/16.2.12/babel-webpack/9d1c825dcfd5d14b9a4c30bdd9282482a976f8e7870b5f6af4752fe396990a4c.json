{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlaylistService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://127.0.0.1:8000';\n    this.playlistsUpdated$ = new Subject();\n  }\n  // Método para obtener todas las playlists de una biblioteca\n  getPlaylistsByLibraryId(libraryId) {\n    const url = `${this.baseUrl}/api/library/${libraryId}/playlists/`;\n    return this.http.get(url).pipe(map(playlists => {\n      return playlists.map(playlist => ({\n        id: playlist.id,\n        playlistName: playlist.playlistName,\n        coverImage: `${this.baseUrl}${playlist.coverImage}`,\n        totalDuration: playlist.totalDuration\n      }));\n    }), catchError(this.handleError));\n  }\n  //Método para obtener una playlist por su ID\n  getPlaylist(playlistId) {\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/songs/`;\n    return this.http.get(url).pipe(map(playlist => {\n      return {\n        id: playlist.id,\n        playlistName: playlist.playlistName,\n        coverImage: `${this.baseUrl}${playlist.coverImage}`,\n        totalDuration: playlist.totalDuration,\n        songs: playlist.songs.map(song => ({\n          id: song.id,\n          title: song.songTitle,\n          duration: song.duration,\n          audio: `${this.baseUrl}${song.audio}`,\n          artist: {\n            artistName: song.album.artist.artistName,\n            coverImage: `${this.baseUrl}${song.album.artist.coverImage}`\n          }\n        }))\n      };\n    }), catchError(this.handleError));\n  }\n  //Método para agregar una canción a una playlist seleccionada\n  addSongToPlaylist(playlistId, songId) {\n    const url = `${this.baseUrl}/api/playlist/add-song/`;\n    const payload = {\n      playlist_id: playlistId,\n      song_id: songId\n    };\n    return this.http.post(url, payload).pipe(catchError(error => {\n      console.error('Error adding song to playlist:', error);\n      return throwError(error);\n    }));\n  }\n  // Método para crear una nueva playlist\n  createPlaylist(playlistData) {\n    const url = `${this.baseUrl}/api/playlist/create/`;\n    return this.http.post(url, playlistData).pipe(catchError(error => {\n      console.error('Error adding playlist:', error);\n      return throwError(error);\n    }));\n  }\n  // Método para eliminar una playlist por su ID\n  deletePlaylist(playlistId) {\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/delete/`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  // Método para actualizar una playlist existente\n  updatePlaylist(playlistId, playlistData) {\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/update/`;\n    const formData = new FormData();\n    formData.append('playlistName', playlistData.playlistName);\n    if (playlistData.coverImage) {\n      formData.append('coverImage', playlistData.coverImage, playlistData.coverImage.name);\n    }\n    return this.http.post(url, formData).pipe(catchError(this.handleError));\n  }\n  // Método para notificar a los suscriptores que las playlists han sido actualizadas\n  notifyPlaylistsUpdated() {\n    this.playlistsUpdated$.next();\n  }\n  // Observable que los componentes pueden suscribirse para escuchar actualizaciones de listas de reproducción\n  onPlaylistsUpdated() {\n    return this.playlistsUpdated$.asObservable();\n  }\n  // Función para manejar errores de solicitud HTTP\n  handleError(error) {\n    console.error('Error en la solicitud:', error);\n    return throwError(error); // Propagar el error para manejarlo en el componente\n  }\n  static #_ = this.ɵfac = function PlaylistService_Factory(t) {\n    return new (t || PlaylistService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlaylistService,\n    factory: PlaylistService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","throwError","catchError","map","PlaylistService","constructor","http","baseUrl","playlistsUpdated$","getPlaylistsByLibraryId","libraryId","url","get","pipe","playlists","playlist","id","playlistName","coverImage","totalDuration","handleError","getPlaylist","playlistId","songs","song","title","songTitle","duration","audio","artist","artistName","album","addSongToPlaylist","songId","payload","playlist_id","song_id","post","error","console","createPlaylist","playlistData","deletePlaylist","delete","updatePlaylist","formData","FormData","append","name","notifyPlaylistsUpdated","next","onPlaylistsUpdated","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\Playlist\\playlist.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subject, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PlaylistService {\r\n  private baseUrl = 'http://127.0.0.1:8000';\r\n  private playlistsUpdated$ = new Subject<void>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Método para obtener todas las playlists de una biblioteca\r\n  getPlaylistsByLibraryId(libraryId: number): Observable<any[]> {\r\n    const url = `${this.baseUrl}/api/library/${libraryId}/playlists/`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      map((playlists) => {\r\n        return playlists.map((playlist) => ({\r\n          id: playlist.id,\r\n          playlistName: playlist.playlistName,\r\n          coverImage: `${this.baseUrl}${playlist.coverImage}`,\r\n          totalDuration: playlist.totalDuration,\r\n        }));\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  //Método para obtener una playlist por su ID\r\n  getPlaylist(playlistId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/songs/`;\r\n    return this.http.get<any>(url).pipe(\r\n      map(playlist => {\r\n        return {\r\n          id: playlist.id,\r\n          playlistName: playlist.playlistName,\r\n          coverImage: `${this.baseUrl}${playlist.coverImage}`,\r\n          totalDuration: playlist.totalDuration,\r\n          songs: playlist.songs.map((song: any) => ({\r\n            id: song.id,\r\n            title: song.songTitle,\r\n            duration: song.duration,\r\n            audio: `${this.baseUrl}${song.audio}`,\r\n            artist:{\r\n              artistName: song.album.artist.artistName,\r\n              coverImage:  `${this.baseUrl}${song.album.artist.coverImage}`\r\n            }\r\n          }))\r\n        };\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  //Método para agregar una canción a una playlist seleccionada\r\n  addSongToPlaylist(playlistId: number, songId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/api/playlist/add-song/`;\r\n    const payload = {\r\n      playlist_id: playlistId,\r\n      song_id: songId,\r\n    };\r\n\r\n    return this.http.post(url, payload).pipe(\r\n      catchError((error) => {\r\n        console.error('Error adding song to playlist:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para crear una nueva playlist\r\n  createPlaylist(playlistData: FormData): Observable<any> {\r\n    const url = `${this.baseUrl}/api/playlist/create/`;\r\n    return this.http.post(url, playlistData).pipe(\r\n      catchError((error) => {\r\n        console.error('Error adding playlist:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para eliminar una playlist por su ID\r\n  deletePlaylist(playlistId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/delete/`;\r\n    return this.http.delete<any>(url).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Método para actualizar una playlist existente\r\n  updatePlaylist(\r\n    playlistId: number,\r\n    playlistData: { playlistName: string; coverImage: File | null }\r\n  ): Observable<any> {\r\n    const url = `${this.baseUrl}/api/playlist/${playlistId}/update/`;\r\n    const formData = new FormData();\r\n    formData.append('playlistName', playlistData.playlistName);\r\n    if (playlistData.coverImage) {\r\n      formData.append(\r\n        'coverImage',\r\n        playlistData.coverImage,\r\n        playlistData.coverImage.name\r\n      );\r\n    }\r\n    return this.http.post(url, formData).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Método para notificar a los suscriptores que las playlists han sido actualizadas\r\n  notifyPlaylistsUpdated() {\r\n    this.playlistsUpdated$.next();\r\n  }\r\n\r\n  // Observable que los componentes pueden suscribirse para escuchar actualizaciones de listas de reproducción\r\n  onPlaylistsUpdated(): Observable<void> {\r\n    return this.playlistsUpdated$.asObservable();\r\n  }\r\n\r\n  // Función para manejar errores de solicitud HTTP\r\n  private handleError(error: any) {\r\n    console.error('Error en la solicitud:', error);\r\n    return throwError(error); // Propagar el error para manejarlo en el componente\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}