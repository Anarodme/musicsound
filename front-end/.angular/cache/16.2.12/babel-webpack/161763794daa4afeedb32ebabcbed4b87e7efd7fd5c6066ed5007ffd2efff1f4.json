{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UserService {\n  constructor(Http, route) {\n    this.Http = Http;\n    this.route = route;\n    this.apiUrl = 'http://127.0.0.1:8000/';\n  }\n  registerUser(data) {\n    return this.Http.post(`${this.apiUrl}signup`, data);\n  }\n  loginUser(data) {\n    return this.Http.post(`${this.apiUrl}login`, data);\n  }\n  logoutUser() {\n    const headers = new HttpHeaders({\n      'Authorization': `Token ${localStorage.getItem('token')}`\n    });\n    return this.Http.get(`${this.apiUrl}logout`, {\n      headers\n    });\n  }\n  //----Verificar si el usuario se encuentra autenticado\n  UserIsAuthenticated() {\n    const requestData = {\n      headers: {\n        'Authorization': `Token ${localStorage.getItem('token')}`\n      }\n    };\n    return this.Http.get(`${this.apiUrl}registered-User`, requestData);\n  }\n  isAuth() {\n    return new Promise((resolve, reject) => {\n      const suscripcion = this.UserIsAuthenticated().subscribe(response => {\n        const data = {\n          \"value\": response.authenticated,\n          \"userAuth\": response.user_id,\n          \"username\": response.username,\n          \"email\": response.email\n        };\n        resolve(data);\n        suscripcion.unsubscribe();\n      }, error => {\n        const data = {\n          \"value\": false\n        };\n        resolve(data);\n        suscripcion.unsubscribe();\n      });\n    });\n  }\n  //----------------------------------------------------------------------------\n  //-----Recuperacion de contraseña\n  emailRecuperacion(data) {\n    return this.Http.post(`${this.apiUrl}email`, data);\n  }\n  restablecerContraseña(data) {\n    return this.Http.post(`${this.apiUrl}rest-pass`, data);\n  }\n  editProfile(data) {\n    return this.Http.post(`${this.apiUrl}update/user`, data);\n  }\n  create_playlist(data) {\n    return this.Http.post(`${this.apiUrl}api/playlist/create/`, data);\n  }\n  getMyLibrary(userId) {\n    return this.Http.get(`${this.apiUrl}api/user/${userId}/library/`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","UserService","constructor","Http","route","apiUrl","registerUser","data","post","loginUser","logoutUser","headers","localStorage","getItem","get","UserIsAuthenticated","requestData","isAuth","Promise","resolve","reject","suscripcion","subscribe","response","authenticated","user_id","username","email","unsubscribe","error","emailRecuperacion","restablecerContraseña","editProfile","create_playlist","getMyLibrary","userId","_","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","_2","factory","ɵfac","providedIn"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private apiUrl:string = 'http://127.0.0.1:8000/';\r\n\r\nconstructor( private Http:HttpClient, private route:ActivatedRoute) { }\r\n\r\n  registerUser(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}signup`, data);\r\n  }\r\n\r\n  loginUser(data: any): Observable<any> {\r\n    return this.Http.post<any>(`${this.apiUrl}login`, data);\r\n  }\r\n\r\n  logoutUser(): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Token ${localStorage.getItem('token')}`\r\n    });\r\n    return this.Http.get(`${this.apiUrl}logout`,{headers});\r\n  }\r\n\r\n\r\n//----Verificar si el usuario se encuentra autenticado\r\n\r\n  UserIsAuthenticated(): Observable<any>{\r\n\r\n    const requestData = {\r\n      headers: {\r\n        'Authorization': `Token ${localStorage.getItem('token')}`,\r\n      },\r\n    };\r\n    return this.Http.get<any>(`${this.apiUrl}registered-User`,requestData);\r\n  }\r\n\r\nisAuth(): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n\r\n    const suscripcion = this.UserIsAuthenticated().subscribe(\r\n      (response) => {\r\n        const data = {\r\n          \"value\":response.authenticated,\r\n          \"userAuth\":response.user_id,\r\n          \"username\":response.username,\r\n          \"email\":response.email\r\n        }\r\n        \r\n        resolve(data);\r\n        suscripcion.unsubscribe();\r\n      },\r\n      (error) => {\r\n        const data = {\r\n          \"value\":false\r\n        }\r\n        resolve(data);\r\n        suscripcion.unsubscribe();\r\n      },\r\n    );\r\n  });\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n\r\n\r\n//-----Recuperacion de contraseña\r\n\r\nemailRecuperacion(data: any): Observable<any> {\r\n  return this.Http.post<any>(`${this.apiUrl}email`, data);\r\n}\r\n\r\nrestablecerContraseña(data: any): Observable<any> {\r\n  return this.Http.post<any>(`${this.apiUrl}rest-pass`, data);\r\n}\r\n\r\neditProfile(data:any):Observable<any>{\r\n  return this.Http.post<any>(`${this.apiUrl}update/user`,data)\r\n}\r\n\r\n\r\ncreate_playlist(data: any): Observable<any> {\r\n  return this.Http.post<any>(`${this.apiUrl}api/playlist/create/`, data);\r\n}\r\n\r\ngetMyLibrary(userId:number){\r\n  return this.Http.get<any>(`${this.apiUrl}api/user/${userId}/library/`);\r\n}\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}