{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, Input } from '@angular/core';\nexport let PlayerControlsComponent = class PlayerControlsComponent {\n  constructor(mediaService) {\n    this.mediaService = mediaService;\n    this.songs = [];\n    this.playIcon = 'fa-play';\n    this.isPlaying = false;\n  }\n  ngOnInit() {\n    this.setupAudioEvents();\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(song => {\n      if (song) {\n        this.selectSong(song);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.audioPlayer.nativeElement.removeEventListener('ended', this.handleEnded.bind(this));\n    this.audioPlayer.nativeElement.removeEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n    clearInterval(this.progressInterval);\n  }\n  setupAudioEvents() {\n    this.audioPlayer.nativeElement.addEventListener('ended', this.handleEnded.bind(this));\n    this.audioPlayer.nativeElement.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\n  }\n  handleEnded() {\n    console.log('Canción actual terminada, reproduciendo la siguiente...');\n    this.play_next_song();\n  }\n  loadAudio(audioUrl) {\n    console.log('Cargando audio:', audioUrl);\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      this.audioPlayer.nativeElement.src = audioUrl;\n      this.audioPlayer.nativeElement.load();\n    }\n  }\n  play() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.play) {\n      this.audioPlayer.nativeElement.play().then(() => {\n        this.updatePlayIcon();\n        this.isPlaying = true;\n        this.startProgressInterval();\n      }).catch(error => {\n        console.error('Error al reproducir el audio:', error);\n      });\n    }\n  }\n  pause() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.duration !== undefined) {\n      this.audioPlayer.nativeElement.pause();\n      this.updatePlayIcon();\n      this.isPlaying = false;\n      clearInterval(this.progressInterval);\n    }\n  }\n  togglePlayPause() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      if (this.audioPlayer.nativeElement.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  }\n  selectSong(song) {\n    this.selectedSong = song;\n    this.loadAudio(song.audio);\n    this.play();\n    this.printNextAndPreviousSongs();\n  }\n  printNextAndPreviousSongs() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      const nextSong = this.songs[nextIndex];\n      console.log('Canción actual:', this.selectedSong);\n      console.log('Canción anterior:', previousSong);\n      console.log('Siguiente canción:', nextSong);\n    }\n  }\n  play_next_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const nextIndex = (currentIndex + 1) % this.songs.length;\n      const nextSong = this.songs[nextIndex];\n      if (nextSong) {\n        console.log('Siguiente canción:', nextSong);\n        this.selectSong(nextSong);\n      } else {\n        console.log('¡La siguiente canción es indefinida!');\n      }\n    }\n  }\n  play_previous_song() {\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\n      const currentIndex = this.songs.findIndex(song => song.id === this.selectedSong.id);\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\n      const previousSong = this.songs[previousIndex];\n      if (previousSong) {\n        console.log('Canción anterior:', previousSong);\n        this.selectSong(previousSong);\n      } else {\n        console.log('¡La canción anterior es indefinida!');\n      }\n    }\n  }\n  handleTimeUpdate() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      const progress = this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration * 100;\n      const progressBar = document.getElementById('progressBar');\n      if (progressBar) {\n        progressBar.value = progress.toString();\n      }\n      this.updatePlayIcon();\n      this.updateTimeDisplay();\n    }\n  }\n  updatePlayIcon() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      const isPlaying = !this.audioPlayer.nativeElement.paused;\n      const newPlayIcon = isPlaying ? 'fa-pause' : 'fa-play';\n      this.playIcon = newPlayIcon;\n      this.isPlaying = isPlaying;\n    }\n  }\n  updateTimeDisplay() {\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.currentTime !== undefined && this.audioPlayer.nativeElement.duration !== undefined) {\n      const timeLeft = document.querySelector('.time-left');\n      const timeRight = document.querySelector('.time-right');\n      if (timeLeft && timeRight) {\n        timeLeft.textContent = this.formatTime(this.audioPlayer.nativeElement.currentTime);\n        timeRight.textContent = this.formatTime(this.audioPlayer.nativeElement.duration);\n      }\n    }\n  }\n  handleProgressBar(event) {\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\n      const progress = event.target.value;\n      const duration = this.audioPlayer.nativeElement.duration;\n      if (!isNaN(duration) && isFinite(duration)) {\n        const newTime = duration * progress / 100;\n        if (!isNaN(newTime) && isFinite(newTime)) {\n          this.audioPlayer.nativeElement.currentTime = newTime;\n        }\n      }\n    }\n  }\n  formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  }\n  startProgressInterval() {\n    clearInterval(this.progressInterval);\n    this.progressInterval = setInterval(() => {\n      if (this.audioPlayer && this.audioPlayer.nativeElement) {\n        const progress = this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration * 100;\n        const progressBar = document.getElementById('progressBar');\n        if (progressBar) {\n          progressBar.value = progress.toString();\n        }\n      }\n    }, 1000);\n  }\n};\n__decorate([ViewChild('audioPlayer', {\n  static: true\n})], PlayerControlsComponent.prototype, \"audioPlayer\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"selectedSong\", void 0);\n__decorate([Input()], PlayerControlsComponent.prototype, \"songs\", void 0);\nPlayerControlsComponent = __decorate([Component({\n  selector: 'app-player-controls',\n  templateUrl: './player-controls.component.html',\n  styleUrls: ['./player-controls.component.css']\n})], PlayerControlsComponent);","map":{"version":3,"names":["Component","ViewChild","Input","PlayerControlsComponent","constructor","mediaService","songs","playIcon","isPlaying","ngOnInit","setupAudioEvents","currentSongSubscription","currentSong$","subscribe","song","selectSong","ngOnDestroy","audioPlayer","nativeElement","removeEventListener","handleEnded","bind","handleTimeUpdate","clearInterval","progressInterval","addEventListener","console","log","play_next_song","loadAudio","audioUrl","src","load","play","then","updatePlayIcon","startProgressInterval","catch","error","pause","duration","undefined","togglePlayPause","paused","selectedSong","audio","printNextAndPreviousSongs","length","currentIndex","findIndex","id","previousIndex","nextIndex","previousSong","nextSong","play_previous_song","progress","currentTime","progressBar","document","getElementById","value","toString","updateTimeDisplay","newPlayIcon","timeLeft","querySelector","timeRight","textContent","formatTime","handleProgressBar","event","target","isNaN","isFinite","newTime","seconds","minutes","Math","floor","remainingSeconds","setInterval","__decorate","static","selector","templateUrl","styleUrls"],"sources":["C:\\Comercio\\version12\\musicsound\\front-end\\src\\app\\Components\\player-controls\\player-controls.component.ts"],"sourcesContent":["import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ElementRef,\r\n  Input,\r\n} from '@angular/core';\r\nimport { MediaService } from 'src/app/Services/player-control/media.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-player-controls',\r\n  templateUrl: './player-controls.component.html',\r\n  styleUrls: ['./player-controls.component.css'],\r\n})\r\nexport class PlayerControlsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('audioPlayer', { static: true })\r\n  audioPlayer!: ElementRef<HTMLAudioElement>;\r\n\r\n  @Input() selectedSong: any;\r\n  @Input() songs: any[] = [];\r\n\r\n  currentSongSubscription: Subscription;\r\n  playIcon: string = 'fa-play';\r\n  isPlaying: boolean = false;\r\n  progressInterval: any;\r\n\r\n  constructor(private mediaService: MediaService) {}\r\n\r\n  ngOnInit() {\r\n    this.setupAudioEvents();\r\n\r\n    this.currentSongSubscription = this.mediaService.currentSong$.subscribe(\r\n      (song) => {\r\n        if (song) {\r\n          this.selectSong(song);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.audioPlayer.nativeElement.removeEventListener(\r\n      'ended',\r\n      this.handleEnded.bind(this)\r\n    );\r\n    this.audioPlayer.nativeElement.removeEventListener(\r\n      'timeupdate',\r\n      this.handleTimeUpdate.bind(this)\r\n    );\r\n    clearInterval(this.progressInterval);\r\n  }\r\n\r\n  setupAudioEvents() {\r\n    this.audioPlayer.nativeElement.addEventListener('ended', this.handleEnded.bind(this));\r\n    this.audioPlayer.nativeElement.addEventListener('timeupdate', this.handleTimeUpdate.bind(this));\r\n  }\r\n\r\n  handleEnded() {\r\n    console.log('Canción actual terminada, reproduciendo la siguiente...');\r\n    this.play_next_song();\r\n  }\r\n\r\n  loadAudio(audioUrl: string) {\r\n    console.log('Cargando audio:', audioUrl);\r\n\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      this.audioPlayer.nativeElement.src = audioUrl;\r\n      this.audioPlayer.nativeElement.load();\r\n    }\r\n  }\r\n\r\n  play() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.play) {\r\n      this.audioPlayer.nativeElement.play()\r\n        .then(() => {\r\n          this.updatePlayIcon();\r\n          this.isPlaying = true;\r\n          this.startProgressInterval();\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error al reproducir el audio:', error);\r\n        });\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.duration !== undefined) {\r\n      this.audioPlayer.nativeElement.pause();\r\n      this.updatePlayIcon();\r\n      this.isPlaying = false;\r\n      clearInterval(this.progressInterval);\r\n    }\r\n  }\r\n\r\n  togglePlayPause() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      if (this.audioPlayer.nativeElement.paused) {\r\n        this.play();\r\n      } else {\r\n        this.pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  selectSong(song: any) {\r\n    this.selectedSong = song;\r\n    this.loadAudio(song.audio);\r\n    this.play();\r\n    this.printNextAndPreviousSongs();\r\n  }\r\n\r\n  printNextAndPreviousSongs() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n\r\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n\r\n      const previousSong = this.songs[previousIndex];\r\n      const nextSong = this.songs[nextIndex];\r\n\r\n      console.log('Canción actual:', this.selectedSong);\r\n      console.log('Canción anterior:', previousSong);\r\n      console.log('Siguiente canción:', nextSong);\r\n    }\r\n  }\r\n\r\n  play_next_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const nextIndex = (currentIndex + 1) % this.songs.length;\r\n      const nextSong = this.songs[nextIndex];\r\n      if (nextSong) {\r\n        console.log('Siguiente canción:', nextSong);\r\n        this.selectSong(nextSong);\r\n      } else {\r\n        console.log('¡La siguiente canción es indefinida!');\r\n      }\r\n    }\r\n  }\r\n\r\n  play_previous_song() {\r\n    if (this.songs && this.songs.length > 0 && this.selectedSong) {\r\n      const currentIndex = this.songs.findIndex(\r\n        (song) => song.id === this.selectedSong.id\r\n      );\r\n      const previousIndex = (currentIndex - 1 + this.songs.length) % this.songs.length;\r\n      const previousSong = this.songs[previousIndex];\r\n      if (previousSong) {\r\n        console.log('Canción anterior:', previousSong);\r\n        this.selectSong(previousSong);\r\n      } else {\r\n        console.log('¡La canción anterior es indefinida!');\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTimeUpdate() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      const progress = (this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration) * 100;\r\n      const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n      if (progressBar) {\r\n        progressBar.value = progress.toString();\r\n      }\r\n      this.updatePlayIcon();\r\n      this.updateTimeDisplay();\r\n    }\r\n  }\r\n\r\n  updatePlayIcon() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      const isPlaying = !this.audioPlayer.nativeElement.paused;\r\n      const newPlayIcon = isPlaying ? 'fa-pause' : 'fa-play';\r\n      this.playIcon = newPlayIcon;\r\n      this.isPlaying = isPlaying;\r\n    }\r\n  }\r\n\r\n  updateTimeDisplay() {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement && this.audioPlayer.nativeElement.currentTime !== undefined && this.audioPlayer.nativeElement.duration !== undefined) {\r\n      const timeLeft = document.querySelector('.time-left');\r\n      const timeRight = document.querySelector('.time-right');\r\n      if (timeLeft && timeRight) {\r\n        timeLeft.textContent = this.formatTime(this.audioPlayer.nativeElement.currentTime);\r\n        timeRight.textContent = this.formatTime(this.audioPlayer.nativeElement.duration);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleProgressBar(event: any) {\r\n    if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n      const progress = event.target.value;\r\n      const duration = this.audioPlayer.nativeElement.duration;\r\n\r\n      if (!isNaN(duration) && isFinite(duration)) {\r\n        const newTime = (duration * progress) / 100;\r\n        if (!isNaN(newTime) && isFinite(newTime)) {\r\n          this.audioPlayer.nativeElement.currentTime = newTime;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  formatTime(seconds: number): string {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = Math.floor(seconds % 60);\r\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n  }\r\n\r\n  startProgressInterval() {\r\n    clearInterval(this.progressInterval);\r\n    this.progressInterval = setInterval(() => {\r\n      if (this.audioPlayer && this.audioPlayer.nativeElement) {\r\n        const progress = (this.audioPlayer.nativeElement.currentTime / this.audioPlayer.nativeElement.duration) * 100;\r\n        const progressBar = document.getElementById('progressBar') as HTMLInputElement;\r\n        if (progressBar) {\r\n          progressBar.value = progress.toString();\r\n        }\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}